import 'package:flutter/foundation.dart';
import 'dart:convert';
import 'dart:io';
import 'dart:async';
import 'package:image_picker/image_picker.dart';

import './anthropic_service.dart';

enum AnalysisType {
  QUICK,
  DETAILED,
  NIGHTMARE,
}

class GoldPrice {
  final double price;
  final double change_24h;
  final double changePercentage;
  final double low_24h;
  final double high_24h;
  final DateTime timestamp;
  final String source;

  GoldPrice({
    required this.price,
    required this.change_24h,
    required this.changePercentage,
    required this.low_24h,
    required this.high_24h,
    required this.timestamp,
    required this.source,
  });
}

class PerformanceConfig {
  static const int CLAUDE_TIMEOUT = 120;
}

class Config {
  static const String CLAUDE_API_KEY =
      String.fromEnvironment('ANTHROPIC_API_KEY');
  static const String CLAUDE_MODEL = String.fromEnvironment('CLAUDE_MODEL',
      defaultValue: 'claude-3-5-sonnet-20241022');
  static const int CLAUDE_MAX_TOKENS =
      int.fromEnvironment('CLAUDE_MAX_TOKENS', defaultValue: 8000);
  static const double CLAUDE_TEMPERATURE = 0.3;
  static const String NIGHTMARE_TRIGGER = 'ÿßŸÑŸÉÿßÿ®Ÿàÿ≥ ÿßŸÑŸÉÿßŸÖŸÑ';
}

class FixedCacheManager {
  final Map<String, CacheEntry> _cache = {};
  static const int MAX_CACHE_SIZE = 100;
  static const int CACHE_DURATION_HOURS = 2;

  String? getAnalysis(String key) {
    final entry = _cache[key];
    if (entry == null) return null;

    if (DateTime.now().difference(entry.timestamp).inHours >
        CACHE_DURATION_HOURS) {
      _cache.remove(key);
      return null;
    }

    return entry.data;
  }

  void setAnalysis(String key, String data) {
    if (_cache.length >= MAX_CACHE_SIZE) {
      // Remove oldest entry
      final oldestKey = _cache.keys.first;
      _cache.remove(oldestKey);
    }

    _cache[key] = CacheEntry(data: data, timestamp: DateTime.now());
  }

  void clearCache() {
    _cache.clear();
  }
}

class CacheEntry {
  final String data;
  final DateTime timestamp;

  CacheEntry({required this.data, required this.timestamp});
}

class FixedClaudeAIManager {
  static FixedClaudeAIManager? _instance;
  static FixedClaudeAIManager get instance =>
      _instance ??= FixedClaudeAIManager._();
  FixedClaudeAIManager._();

  late final AnthropicClient _client;
  final FixedCacheManager cache = FixedCacheManager();
  final ImagePicker _imagePicker = ImagePicker();

  void initialize() {
    try {
      final anthropicService = AnthropicService();
      _client = AnthropicClient(anthropicService.dio);
      debugPrint('FixedClaudeAIManager initialized successfully');
    } catch (e) {
      debugPrint('Failed to initialize FixedClaudeAIManager: $e');
      rethrow;
    }
  }

  Future<String> analyzeGold({
    required String prompt,
    required GoldPrice goldPrice,
    File? imageFile,
    String? imageBase64,
    AnalysisType analysisType = AnalysisType.DETAILED,
    Map<String, dynamic>? userSettings,
  }) async {
    try {
      // Initialize if not already done
      if (!_isInitialized()) {
        initialize();
      }

      // Check cache for text-only analysis
      if (imageFile == null && imageBase64 == null) {
        final cacheKey = _generateCacheKey(prompt, goldPrice, analysisType);
        final cachedResult = cache.getAnalysis(cacheKey);
        if (cachedResult != null) {
          return '$cachedResult\n\nüî• *ŸÖŸÜ ÿßŸÑÿ∞ÿßŸÉÿ±ÿ© ÿßŸÑŸÖÿ§ŸÇÿ™ÿ© ŸÑŸÑÿ≥ÿ±ÿπÿ©*';
        }
      }

      // Check for nightmare analysis
      final isNightmareAnalysis = Config.NIGHTMARE_TRIGGER.contains(prompt) ||
          prompt.contains(Config.NIGHTMARE_TRIGGER);

      if (isNightmareAnalysis) {
        analysisType = AnalysisType.NIGHTMARE;
      }

      final systemPrompt = _buildSystemPrompt(analysisType, goldPrice,
          userSettings, imageFile != null || imageBase64 != null);
      final userPrompt = _buildUserPrompt(prompt, goldPrice, analysisType,
          imageFile != null || imageBase64 != null);

      // Perform analysis with retry mechanism
      const maxRetries = 2;

      for (int attempt = 0; attempt < maxRetries; attempt++) {
        try {
          String result;

          if (imageFile != null || imageBase64 != null) {
            // Image analysis
            result = await _performImageAnalysis(
                userPrompt, systemPrompt, imageFile, imageBase64);
          } else {
            // Text analysis
            result = await _performTextAnalysis(userPrompt, systemPrompt);
          }

          // Cache text-only results
          if (imageFile == null && imageBase64 == null) {
            final cacheKey = _generateCacheKey(prompt, goldPrice, analysisType);
            cache.setAnalysis(cacheKey, result);
          }

          return result;
        } on TimeoutException {
          debugPrint('Claude API timeout - attempt ${attempt + 1}/$maxRetries');
          if (attempt == maxRetries - 1) {
            return imageFile != null || imageBase64 != null
                ? _generateChartFallbackAnalysis(goldPrice)
                : _generateTextFallbackAnalysis(goldPrice, analysisType);
          }
          await Future.delayed(Duration(seconds: 2 * (attempt + 1)));
        } catch (e) {
          final errorStr = e.toString().toLowerCase();

          if (errorStr.contains('overloaded') || errorStr.contains('529')) {
            debugPrint(
                'Claude API overloaded - attempt ${attempt + 1}/$maxRetries');
            if (attempt == maxRetries - 1) {
              return imageFile != null || imageBase64 != null
                  ? _generateChartFallbackAnalysis(goldPrice)
                  : _generateTextFallbackAnalysis(goldPrice, analysisType);
            }
            await Future.delayed(Duration(seconds: 3 * (attempt + 1)));
            continue;
          } else if (errorStr.contains('rate_limit') ||
              errorStr.contains('429')) {
            debugPrint('Claude API rate limited');
            if (attempt == maxRetries - 1) {
              return '‚ö†Ô∏è ÿ™ŸÖ ÿ™ÿ¨ÿßŸàÿ≤ ÿßŸÑÿ≠ÿØ ÿßŸÑŸÖÿ≥ŸÖŸàÿ≠. ÿ≠ÿßŸàŸÑ ÿ®ÿπÿØ ŸÇŸÑŸäŸÑ.';
            }
            await Future.delayed(const Duration(seconds: 5));
            continue;
          } else {
            debugPrint('Claude API error: $e');
            return imageFile != null || imageBase64 != null
                ? _generateChartFallbackAnalysis(goldPrice)
                : '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.';
          }
        }
      }

      // If all retries failed
      return imageFile != null || imageBase64 != null
          ? _generateChartFallbackAnalysis(goldPrice)
          : _generateTextFallbackAnalysis(goldPrice, analysisType);
    } catch (e) {
      debugPrint('Analysis error: $e');
      return '‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ: ${e.toString()}';
    }
  }

  Future<String> _performImageAnalysis(String userPrompt, String systemPrompt,
      File? imageFile, String? imageBase64) async {
    try {
      String base64Image;

      if (imageFile != null) {
        final imageBytes = await imageFile.readAsBytes();
        base64Image = base64Encode(imageBytes);
      } else {
        base64Image = imageBase64!;
      }

      final message = Message(
        role: 'user',
        content: [
          {
            'type': 'image',
            'source': {
              'type': 'base64',
              'media_type': 'image/jpeg',
              'data': base64Image,
            },
          },
          {
            'type': 'text',
            'text': userPrompt,
          },
        ],
      );

      final completion = await _client.createChat(
        messages: [message],
        model: Config.CLAUDE_MODEL,
        maxTokens: Config.CLAUDE_MAX_TOKENS,
        temperature: Config.CLAUDE_TEMPERATURE,
      ).timeout(Duration(seconds: PerformanceConfig.CLAUDE_TIMEOUT));

      return completion.text;
    } catch (e) {
      debugPrint('Image analysis error: $e');
      rethrow;
    }
  }

  Future<String> _performTextAnalysis(
      String userPrompt, String systemPrompt) async {
    try {
      final message = Message(role: 'user', content: userPrompt);

      final completion = await _client.createChat(
        messages: [message],
        model: Config.CLAUDE_MODEL,
        maxTokens: Config.CLAUDE_MAX_TOKENS,
        temperature: Config.CLAUDE_TEMPERATURE,
      ).timeout(Duration(seconds: PerformanceConfig.CLAUDE_TIMEOUT));

      return completion.text;
    } catch (e) {
      debugPrint('Text analysis error: $e');
      rethrow;
    }
  }

  // Image selection methods
  Future<File?> selectImageFromGallery() async {
    try {
      final XFile? pickedFile = await _imagePicker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 1920,
        maxHeight: 1080,
        imageQuality: 85,
      );

      if (pickedFile != null) {
        return File(pickedFile.path);
      }
      return null;
    } catch (e) {
      debugPrint('Error selecting image from gallery: $e');
      return null;
    }
  }

  Future<File?> captureImageFromCamera() async {
    try {
      final XFile? pickedFile = await _imagePicker.pickImage(
        source: ImageSource.camera,
        maxWidth: 1920,
        maxHeight: 1080,
        imageQuality: 85,
      );

      if (pickedFile != null) {
        return File(pickedFile.path);
      }
      return null;
    } catch (e) {
      debugPrint('Error capturing image from camera: $e');
      return null;
    }
  }

  // Streaming chat for real-time conversation
  Stream<String> streamChat(List<Message> messages) async* {
    try {
      if (!_isInitialized()) {
        initialize();
      }

      yield* _client.streamChat(
        messages: messages,
        model: Config.CLAUDE_MODEL,
        maxTokens: Config.CLAUDE_MAX_TOKENS,
        temperature: Config.CLAUDE_TEMPERATURE,
      );
    } catch (e) {
      debugPrint('Stream chat error: $e');
      yield 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©: ${e.toString()}';
    }
  }

  // Chat conversation method
  Future<String> chatWithAI(List<Message> messages) async {
    try {
      if (!_isInitialized()) {
        initialize();
      }

      final completion = await _client
          .createChat(
            messages: messages,
            model: Config.CLAUDE_MODEL,
            maxTokens: Config.CLAUDE_MAX_TOKENS,
            temperature: Config.CLAUDE_TEMPERATURE,
          )
          .timeout(Duration(seconds: PerformanceConfig.CLAUDE_TIMEOUT));

      return completion.text;
    } catch (e) {
      debugPrint('Chat error: $e');
      return 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©: ${e.toString()}';
    }
  }

  String _generateCacheKey(
      String prompt, GoldPrice goldPrice, AnalysisType analysisType) {
    final combinedString = '$prompt${goldPrice.price}${analysisType.name}';
    return combinedString.hashCode.toString();
  }

  bool _isInitialized() {
    try {
      return _client != null;
    } catch (e) {
      return false;
    }
  }

  String _buildSystemPrompt(AnalysisType analysisType, GoldPrice goldPrice,
      Map<String, dynamic>? userSettings, bool hasImage) {
    String basePrompt =
        '''ÿ£ŸÜÿ™ ÿÆÿ®Ÿäÿ± ÿπÿßŸÑŸÖŸä ŸÅŸä ÿ£ÿ≥ŸàÿßŸÇ ÿßŸÑŸÖÿπÿßÿØŸÜ ÿßŸÑÿ´ŸÖŸäŸÜÿ© ŸàÿßŸÑÿ∞Ÿáÿ® ŸÖÿπ ÿÆÿ®ÿ±ÿ© +25 ÿ≥ŸÜÿ© ŸÅŸä:
‚Ä¢ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÅŸÜŸä ŸàÿßŸÑŸÉŸÖŸä ÿßŸÑŸÖÿ™ŸÇÿØŸÖ ŸÖÿ™ÿπÿØÿØ ÿßŸÑÿ£ÿ∑ÿ± ÿßŸÑÿ≤ŸÖŸÜŸäÿ©
‚Ä¢ ÿßŸÉÿ™ÿ¥ÿßŸÅ ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑŸÅŸÜŸäÿ© ŸàÿßŸÑÿ•ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©
‚Ä¢ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿßÿ∑ÿ± ŸàÿßŸÑŸÖÿ≠ÿßŸÅÿ∏ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±Ÿäÿ© ÿßŸÑŸÖÿ™ÿÆÿµÿµÿ©
‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ŸÜŸÇÿßÿ∑ ÿßŸÑÿßŸÜÿπŸÉÿßÿ≥ ŸàŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ÿßŸÑÿØÿπŸÖ ŸàÿßŸÑŸÖŸÇÿßŸàŸÖÿ©
‚Ä¢ ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸàÿßŸÑÿ™ÿØÿßŸàŸÑ ÿßŸÑÿÆŸàÿßÿ±ÿ≤ŸÖŸä ÿßŸÑŸÖÿ™ŸÇÿØŸÖ
‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿπÿ±ÿ∂ ŸàÿßŸÑÿ∑ŸÑÿ® ŸàÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑŸÖÿ§ÿ≥ÿ≥Ÿäÿ©''';

    if (hasImage) {
      basePrompt += '''
‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ¥ÿßÿ±ÿ™ ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ÿßŸÑŸÖÿ™ŸÇÿØŸÖ
‚Ä¢ ŸÇÿ±ÿßÿ°ÿ© ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑŸÅŸÜŸäÿ© ŸÖŸÜ ÿßŸÑÿ¥ÿßÿ±ÿ™
‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ÿ≠ÿ¨ÿßŸÖ ŸàÿßŸÑŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ©
‚Ä¢ ÿßŸÉÿ™ÿ¥ÿßŸÅ ŸÜŸÇÿßÿ∑ ÿßŸÑÿØÿÆŸàŸÑ ŸàÿßŸÑÿÆÿ±Ÿàÿ¨ ŸÖŸÜ ÿßŸÑÿ¥ÿßÿ±ÿ™''';
    }

    basePrompt += '''

üèÜ ÿßŸÑÿßŸÜÿ™ŸÖÿßÿ° ÿßŸÑŸÖÿ§ÿ≥ÿ≥Ÿä: Gold Nightmare Academy - ÿ£ŸÉÿßÿØŸäŸÖŸäÿ© ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ

ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠Ÿäÿ© ÿßŸÑŸÖÿπÿ™ŸÖÿØÿ©:
ü•á ÿßŸÑÿ≥ÿπÿ±: \$${goldPrice.price} USD/oz
üìà ÿßŸÑÿ™ÿ∫ŸäŸäÿ± 24h: ${goldPrice.change_24h >= 0 ? '+' : ''}${goldPrice.change_24h.toStringAsFixed(2)} (${goldPrice.changePercentage >= 0 ? '+' : ''}${goldPrice.changePercentage.toStringAsFixed(2)}%)
üìä ÿßŸÑŸÖÿØŸâ: \$${goldPrice.low_24h} - \$${goldPrice.high_24h}
‚è∞ ÿßŸÑŸàŸÇÿ™: ${goldPrice.timestamp.toString()}
üì° ÿßŸÑŸÖÿµÿØÿ±: ${goldPrice.source}
''';

    if (analysisType == AnalysisType.NIGHTMARE) {
      basePrompt += '''

üî•üî•üî• **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ¥ÿßŸÖŸÑ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ** üî•üî•üî•

üéØ **ÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸÑŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ¥ÿßŸÖŸÑ:**
```
üìà **1. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ÿ∑ÿ± ÿßŸÑÿ≤ŸÖŸÜŸäÿ© ÿßŸÑŸÖÿ™ÿπÿØÿØÿ©:**
‚Ä¢ M5, M15, H1, H4, D1 ŸÖÿπ ŸÜÿ≥ÿ® ÿßŸÑÿ´ŸÇÿ©
‚Ä¢ ÿ•ÿ¨ŸÖÿßÿπ ÿßŸÑÿ£ÿ∑ÿ± ÿßŸÑÿ≤ŸÖŸÜŸäÿ© ŸàÿßŸÑÿ™ŸàÿµŸäÿ© ÿßŸÑŸÖŸàÿ≠ÿØÿ©

üéØ **2. ŸÜŸÇÿßÿ∑ ÿßŸÑÿØÿÆŸàŸÑ ŸàÿßŸÑÿÆÿ±Ÿàÿ¨ ÿßŸÑÿØŸÇŸäŸÇÿ©:**
‚Ä¢ ŸÜŸÇÿßÿ∑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ÿßŸÑÿ≥ŸÜÿ™ ÿßŸÑŸàÿßÿ≠ÿØ ŸÖÿπ ÿßŸÑÿ£ÿ≥ÿ®ÿßÿ®
‚Ä¢ ŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ÿßŸÑÿÆÿ±Ÿàÿ¨ ÿßŸÑŸÖÿ™ÿØÿ±ÿ¨ÿ©

üõ°Ô∏è **3. ŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ÿßŸÑÿØÿπŸÖ ŸàÿßŸÑŸÖŸÇÿßŸàŸÖÿ©:**
‚Ä¢ ÿßŸÑÿØÿπŸàŸÖ ŸàÿßŸÑŸÖŸÇÿßŸàŸÖÿßÿ™ ŸÖÿπ ŸÇŸàÿ© ŸÉŸÑ ŸÖÿ≥ÿ™ŸàŸâ
‚Ä¢ ÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ÿßŸÑŸÜŸÅÿ≥Ÿäÿ© ÿßŸÑŸÖŸáŸÖÿ©

üîÑ **4. ŸÜŸÇÿßÿ∑ ÿßŸÑÿßÿ±ÿ™ÿØÿßÿØ ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑÿ©:**
‚Ä¢ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿßÿ±ÿ™ÿØÿßÿ± ÿπÿßŸÑŸäÿ© ÿßŸÑÿßÿ≠ÿ™ŸÖÿßŸÑ
‚Ä¢ ÿ•ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿ£ŸÉŸäÿØ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©

‚öñÔ∏è **5. ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿπÿ±ÿ∂ ŸàÿßŸÑÿ∑ŸÑÿ®:**
‚Ä¢ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿπÿ±ÿ∂ ÿßŸÑŸÖÿ§ÿ≥ÿ≥Ÿäÿ©
‚Ä¢ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ∑ŸÑÿ® ÿßŸÑŸÇŸàŸäÿ©

‚ö° **6. ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿßÿ™ ÿßŸÑÿ≥ŸÉÿßŸÑÿ®ŸäŸÜÿ¨:**
‚Ä¢ ŸÅÿ±ÿµ ÿßŸÑÿ≥ŸÉÿßŸÑÿ®ŸäŸÜÿ¨ (1-15 ÿØŸÇŸäŸÇÿ©)
‚Ä¢ ŸÜŸÇÿßÿ∑ ÿßŸÑÿØÿÆŸàŸÑ ÿßŸÑÿ≥ÿ±Ÿäÿπÿ©

üìà **7. ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿßÿ™ ÿßŸÑÿ≥ŸàŸäŸÜÿ¨:**
‚Ä¢ ŸÅÿ±ÿµ ÿßŸÑÿ™ÿØÿßŸàŸÑ ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑŸÖÿØŸâ
‚Ä¢ ŸÜŸÇÿßÿ∑ ÿßŸÑÿØÿÆŸàŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ©

üîÑ **8. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿßŸÜÿπŸÉÿßÿ≥:**
‚Ä¢ ŸÜŸÇÿßÿ∑ ÿßŸÑÿßŸÜÿπŸÉÿßÿ≥ ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑÿ©
‚Ä¢ ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿßŸÜÿπŸÉÿßÿ≥

üìä **9. ŸÜÿ≥ÿ® ÿßŸÑÿ´ŸÇÿ© ÿßŸÑŸÖÿ®ÿ±ÿ±ÿ©:**
‚Ä¢ ŸÜÿ≥ÿ®ÿ© ÿ´ŸÇÿ© ŸÑŸÉŸÑ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖÿπ ÿßŸÑŸÖÿ®ÿ±ÿ±ÿßÿ™
‚Ä¢ ÿßÿ≠ÿ™ŸÖÿßŸÑŸäÿ© ŸÜÿ¨ÿßÿ≠ ŸÉŸÑ ÿ≥ŸäŸÜÿßÿ±ŸäŸà

‚ÑπÔ∏è **10. ÿ™ŸàÿµŸäÿßÿ™ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿßÿ∑ÿ±:**
‚Ä¢ ÿ≠ÿ¨ŸÖ ÿßŸÑÿµŸÅŸÇÿ© ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
‚Ä¢ ŸàŸÇŸÅ ÿßŸÑÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑŸÖÿ´ÿßŸÑŸä
```''';
    } else if (analysisType == AnalysisType.QUICK) {
      basePrompt += '''

‚ö° **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≥ÿ±Ÿäÿπ - ÿ£ŸÇÿµŸâ 150 ŸÉŸÑŸÖÿ©:**

üéØ **ÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®:**
```
üéØ **ÿßŸÑÿ™ŸàÿµŸäÿ©:** [BUY/SELL/HOLD]
üìà **ÿßŸÑÿ≥ÿπÿ± ÿßŸÑÿ≠ÿßŸÑŸä:** \$[ÿßŸÑÿ≥ÿπÿ±]
üî¥ **ÿßŸÑÿ≥ÿ®ÿ®:** [ÿ≥ÿ®ÿ® Ÿàÿßÿ≠ÿØ ŸÇŸàŸä]

üìä **ÿßŸÑÿ£ŸáÿØÿßŸÅ:**
üèÜ ÿßŸÑŸáÿØŸÅ ÿßŸÑÿ£ŸàŸÑ: \$[ÿßŸÑÿ≥ÿπÿ±]
üî¥ ŸàŸÇŸÅ ÿßŸÑÿÆÿ≥ÿßÿ±ÿ©: \$[ÿßŸÑÿ≥ÿπÿ±]

‚è∞ **ÿßŸÑÿ•ÿ∑ÿßÿ± ÿßŸÑÿ≤ŸÖŸÜŸä:** [ÿßŸÑŸÖÿØÿ© ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©]
üî• **ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ´ŸÇÿ©:** [ŸÜÿ≥ÿ®ÿ© ŸÖÿ¶ŸàŸäÿ©]%
```''';
    }

    basePrompt += '''

üéØ **ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿπÿßŸÖÿ©:**
1. ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ¨ÿØÿßŸàŸÑ Ÿàÿ™ÿ±ÿ™Ÿäÿ®ÿßÿ™ ÿ¨ŸÖŸäŸÑÿ©
2. ÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ŸÑŸâ ÿ£ŸÇÿ≥ÿßŸÖ Ÿàÿßÿ∂ÿ≠ÿ©
3. ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ±ŸÖŸàÿ≤ ÿ™ÿπÿ®Ÿäÿ±Ÿäÿ© ŸÖŸÜÿßÿ≥ÿ®ÿ©
4. ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©
5. ÿ™ŸÇÿØŸäŸÖ ŸÜÿ≥ÿ® ÿ´ŸÇÿ© ŸÖÿ®ÿ±ÿ±ÿ© ÿ•ÿ≠ÿµÿßÿ¶ŸäÿßŸã
6. ÿ™ÿ≠ŸÑŸäŸÑ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÖÿπ ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ŸÅŸÜŸäÿ© ÿØŸÇŸäŸÇÿ©
7. ŸÜŸÇÿßÿ∑ ÿØÿÆŸàŸÑ ŸàÿÆÿ±Ÿàÿ¨ ÿ®ÿßŸÑÿ≥ŸÜÿ™ ÿßŸÑŸàÿßÿ≠ÿØ

‚ö†Ô∏è ŸÖŸÑÿßÿ≠ÿ∏ÿ©: Ÿáÿ∞ÿß ÿ™ÿ≠ŸÑŸäŸÑ ÿ™ÿπŸÑŸäŸÖŸä ŸàŸÑŸäÿ≥ ŸÜÿµŸäÿ≠ÿ© ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±Ÿäÿ© ÿ¥ÿÆÿµŸäÿ©''';

    return basePrompt;
  }

  String _buildUserPrompt(String prompt, GoldPrice goldPrice,
      AnalysisType analysisType, bool hasImage) {
    String userPrompt = '''
${hasImage ? 'ŸÇŸÖ ÿ®ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ¥ÿßÿ±ÿ™ ÿßŸÑŸÖÿ±ŸÅŸÇ ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ©:' : ''}

ÿ∑ŸÑÿ® ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ: $prompt

ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ©:
- ÿßŸÑÿ≥ÿπÿ±: \$${goldPrice.price}
- ÿßŸÑÿ™ÿ∫ŸäŸäÿ±: ${goldPrice.change_24h >= 0 ? '+' : ''}${goldPrice.change_24h.toStringAsFixed(2)} (${goldPrice.changePercentage >= 0 ? '+' : ''}${goldPrice.changePercentage.toStringAsFixed(2)}%)
- ÿßŸÑŸÖÿØŸâ: \$${goldPrice.low_24h} - \$${goldPrice.high_24h}

${hasImage ? 'ÿ≠ŸÑŸÑ ÿßŸÑÿ¥ÿßÿ±ÿ™ Ÿàÿßÿ±ÿ®ÿ∑ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿ®ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ© ÿßŸÑŸÖŸÇÿØŸÖÿ©.' : ''}
''';

    return userPrompt;
  }

  String _generateChartFallbackAnalysis(GoldPrice goldPrice) {
    final trend = goldPrice.changePercentage >= 0 ? 'ÿµÿßÿπÿØ' : 'Ÿáÿßÿ®ÿ∑';
    final recommendation = goldPrice.changePercentage >= 1
        ? 'BUY'
        : goldPrice.changePercentage <= -1
            ? 'SELL'
            : 'HOLD';

    return '''
üîÑ **ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ¥ÿßÿ±ÿ™ - ŸÜŸÖÿ∑ ÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä**

üìä **ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿ≠ÿßŸÑŸä:**
ü•á ÿßŸÑÿ≥ÿπÿ±: \$${goldPrice.price}
üìà ÿßŸÑÿßÿ™ÿ¨ÿßŸá: $trend (${goldPrice.changePercentage.toStringAsFixed(2)}%)

üéØ **ÿßŸÑÿ™ŸàÿµŸäÿ© ÿßŸÑÿ£ŸàŸÑŸäÿ©:** $recommendation

üìà **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÅŸÜŸä ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä:**
‚Ä¢ ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ≠ÿßŸÑŸä: \$${goldPrice.price}
‚Ä¢ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ±: \$${(goldPrice.price * 0.995).toStringAsFixed(2)}
‚Ä¢ ÿßŸÑŸÖŸÇÿßŸàŸÖÿ© ÿßŸÑŸÖÿ®ÿßÿ¥ÿ±ÿ©: \$${(goldPrice.price * 1.005).toStringAsFixed(2)}

‚ö†Ô∏è **ŸÖŸÑÿßÿ≠ÿ∏ÿ©:** Ÿáÿ∞ÿß ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ŸàŸÑŸä. ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸÅÿµŸÑÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.

üî• *ÿ™ŸÖ ÿ•ŸÜÿ™ÿßÿ¨ Ÿáÿ∞ÿß ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿ®Ÿàÿßÿ≥ÿ∑ÿ© Gold Nightmare Academy*
''';
  }

  String _generateTextFallbackAnalysis(
      GoldPrice goldPrice, AnalysisType analysisType) {
    final trend = goldPrice.changePercentage >= 0 ? 'ÿµÿßÿπÿØ' : 'Ÿáÿßÿ®ÿ∑';
    final strength = goldPrice.changePercentage.abs() > 1 ? 'ŸÇŸàŸä' : 'ŸÖÿπÿ™ÿØŸÑ';

    return '''
üìä **ÿ™ÿ≠ŸÑŸäŸÑ ÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä - ${analysisType.name}**

ü•á **ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ©:**
‚Ä¢ ÿßŸÑÿ≥ÿπÿ±: \$${goldPrice.price}
‚Ä¢ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±: ${goldPrice.changePercentage >= 0 ? '+' : ''}${goldPrice.changePercentage.toStringAsFixed(2)}%
‚Ä¢ ÿßŸÑÿßÿ™ÿ¨ÿßŸá: $trend $strength

üìà **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÅŸÜŸä:**
‚Ä¢ ÿßŸÑŸÖŸÇÿßŸàŸÖÿ©: \$${goldPrice.high_24h}
‚Ä¢ ÿßŸÑÿØÿπŸÖ: \$${goldPrice.low_24h}
‚Ä¢ ÿßŸÑŸÜÿ∑ÿßŸÇ: \$${(goldPrice.high_24h - goldPrice.low_24h).toStringAsFixed(2)}

üéØ **ÿßŸÑÿ™ŸàÿµŸäÿ©:** ${goldPrice.changePercentage >= 1 ? 'ŸÖÿ±ÿßŸÇÿ®ÿ© ŸÑŸÑÿ¥ÿ±ÿßÿ°' : goldPrice.changePercentage <= -1 ? 'ŸÖÿ±ÿßŸÇÿ®ÿ© ŸÑŸÑÿ®Ÿäÿπ' : 'ÿßŸÜÿ™ÿ∏ÿßÿ±'}

‚ö†Ô∏è **ŸÖŸÑÿßÿ≠ÿ∏ÿ©:** ÿ™ÿ≠ŸÑŸäŸÑ ŸÖÿ®ÿ≥ÿ∑ ÿ®ÿ≥ÿ®ÿ® ÿ∂ÿ∫ÿ∑ ÿßŸÑŸÜÿ∏ÿßŸÖ. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸÅÿµŸÑ.

üî• *ÿ®Ÿàÿßÿ≥ÿ∑ÿ© Gold Nightmare Academy*
''';
  }

  // Test connection
  Future<bool> testConnection() async {
    try {
      if (!_isInitialized()) {
        initialize();
      }

      final testMessage = Message(role: 'user', content: 'Test connection');
      await _client.createChat(messages: [testMessage], maxTokens: 10);
      return true;
    } catch (e) {
      debugPrint('Connection test failed: $e');
      return false;
    }
  }

  // Clear cache
  void clearCache() {
    cache.clearCache();
  }
}

// Emoji helper function
String emoji(String name) {
  final emojiMap = {
    'gold': 'ü•á',
    'chart': 'üìà',
    'up_arrow': '‚¨ÜÔ∏è',
    'clock': '‚è∞',
    'signal': 'üì°',
    'fire': 'üî•',
    'target': 'üéØ',
    'shield': 'üõ°Ô∏è',
    'refresh': 'üîÑ',
    'scales': '‚öñÔ∏è',
    'zap': '‚ö°',
    'info': '‚ÑπÔ∏è',
    'trophy': 'üèÜ',
    'warning': '‚ö†Ô∏è',
    'cross': '‚ùå',
    'red_dot': 'üî¥',
  };
  return emojiMap[name] ?? '‚Ä¢';
}